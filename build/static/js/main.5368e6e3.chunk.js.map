{"version":3,"sources":["serviceWorker.js","index.js","components/App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","C_Ethereum_Projects_hct_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","C_Ethereum_Projects_hct_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Ethereum_Projects_hct_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","sellerState","seller","value","objectState","object","escrowState","escrow","auditorState","auditor","escrowAgentState","escrowAgent","onSubmit","add","error","_ipfsHash","hash","_object","_escrow","_auditor","_escrowAgent","contract","methods","createPost","send","from","account","r","ipfsHash","seller2","object2","escrow2","auditor2","isPostActive","escrowAgent2","web3","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","HCTMarketplace","networks","abi","address","Contract","totalPosts","postCount","events","PosterCreated","returnValues","postID","i","getPost","post","react__WEBPACK_IMPORTED_MODULE_7___default","className","href","rel","role","concat","src","type","required","name","onChange","hint","Component"],"mappings":"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","file":"static/js/main.5368e6e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport HCTMarketplace from '../abis/HCTMarketplace.json'\r\n\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    console.log(accounts)\r\n    this.setState({ account: accounts[0] })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = HCTMarketplace.networks[networkId]\r\n    if(networkData) {\r\n      const abi = HCTMarketplace.abi\r\n      const address = networkData.address\r\n      const contract = web3.eth.Contract(abi, address)\r\n      this.setState({ contract })\r\n\r\n      const postCount = await contract.methods.totalPosts().call();\r\n      console.log(postCount);\r\n  \r\n\r\n      this.state.contract.events.PosterCreated({}, function(error, event) { \r\n        const seller = event.returnValues['party']\r\n        const postID = event.returnValues['postID']\r\n        const ipfsHash = event.returnValues['ipfsHash']\r\n        console.log(event.returnValues)\r\n        console.log(postID)\r\n        console.log(seller) \r\n        console.log(ipfsHash)  \r\n        \r\n       })\r\n\r\n      for(var i=0;i<postCount;i++){\r\n\r\n        const post =  await contract.methods.getPost(i).call();\r\n        this.setState({seller2: post[0]})\r\n        this.setState({object2: post[1]})\r\n        this.setState({ipfsHash: post[2]})\r\n        this.setState({escrowAgent2: post[3]})\r\n        this.setState({auditor2: post[4]})\r\n        this.setState({isPostActive: post[5]})\r\n        this.setState({escrow2: post[6]})\r\n \r\n        /* var seller = this.state.seller2;\r\n        var object = this.state.object2;\r\n        var ipfsHash = this.state.ipfsHash;\r\n        var escrowAgent = this.state.escrowAgent2;\r\n        var escrow = this.state.escrow2; */\r\n  \r\n        \r\n  \r\n        console.log(this.state.seller2);\r\n        console.log(this.state.object2);\r\n        console.log(this.state.ipfsHash);\r\n        console.log(this.state.escrowAgent2);\r\n        console.log(this.state.auditor2);\r\n        console.log(this.state.isPostActive);\r\n        console.log(this.state.escrow2);\r\n        \r\n      }\r\n      \r\n  \r\n      \r\n      \r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    \r\n    this.state = {\r\n      seller:'',\r\n      seller2:'',\r\n      object: '',\r\n      object2: '',\r\n      ipfsHash: '',\r\n      escrow: 0,\r\n      escrow2: 0,\r\n      auditor: '',\r\n      auditor2: '',\r\n      isPostActive: true,\r\n      escrowAgent: '',\r\n      escrowAgent2: '',\r\n      contract: null,\r\n      web3: null,\r\n      buffer: null,\r\n      account: null\r\n    }\r\n  }\r\n\r\n  captureFile = (event) => {\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n  sellerState = (event) => {\r\n    event.preventDefault()\r\n    this.setState({seller: event.target.value});\r\n  }\r\n  objectState = (event) => {\r\n    event.preventDefault()\r\n    this.setState({object: event.target.value});\r\n  }\r\n  escrowState = (event) => {\r\n    event.preventDefault()\r\n    this.setState({escrow: event.target.value});\r\n  }\r\n  auditorState = (event) => {\r\n    event.preventDefault()\r\n    this.setState({auditor: event.target.value});\r\n  }\r\n  escrowAgentState = (event) => {\r\n    event.preventDefault()\r\n    this.setState({escrowAgent: event.target.value});\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault() \r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log(\"Submitting pic to ipfs...\")\r\n      const _ipfsHash = result[0].hash\r\n     // const _seller = this.state.seller\r\n      const _object = this.state.object\r\n      const _escrow = this.state.escrow\r\n      const _auditor = this.state.auditor\r\n      const _escrowAgent = this.state.escrowAgent\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n       this.state.contract.methods.createPost(_ipfsHash, _object, _escrow, _auditor, _escrowAgent).send({ from: this.state.account }).then((r) => {\r\n        //  this.setState({seller: _seller})     \r\n          this.setState({object: _object})\r\n          this.setState({ipfsHash: _ipfsHash})\r\n          this.setState({escrow: _escrow})\r\n          this.setState({auditor: _auditor})\r\n          this.setState({escrowAgent: _escrowAgent})  \r\n       })      \r\n    })\r\n  }\r\n\r\n   render() {\r\n  \r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Handi Craft\r\n          </a>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <a\r\n                  href={`https://ipfs.infura.io/ipfs/${this.state.ipfsHash}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >           \r\n                  <img src={`https://ipfs.infura.io/ipfs/${this.state.ipfsHash}`} />\r\n                </a>\r\n                <br></br>\r\n                \r\n                Seller:  {this.state.seller2}\r\n                <br></br>\r\n                <br></br>\r\n                Escrow Agent:  {this.state.escrowAgent2}\r\n                <br></br>\r\n                <br></br>           \r\n                auditor: {this.state.auditor2}\r\n                <p>&nbsp;</p>          \r\n\r\n                             \r\n                <h2>Change Pic</h2>\r\n   \r\n                <form onSubmit={this.onSubmit} >\r\n                  <input type='file' required name='ipfsHash' onChange={this.captureFile} />\r\n                  {/* <input type='text' required name='seller' hint='seller address' onChange={this.sellerState} /> */}\r\n                  object type:&nbsp;&nbsp;<input type='number' required name='type' hint='object type' onChange={this.objectState} />&nbsp;&nbsp;                  \r\n                  Escrow amount:&nbsp;&nbsp;<input type='text' required name='escrow' hint='escrow amount' onChange={this.escrowState} />&nbsp;&nbsp;\r\n                  Auditor Address:&nbsp;&nbsp;<input type='text' required name='auditor' hint='auditor address' onChange={this.auditorState} />&nbsp;&nbsp;\r\n                  Escrow Agesnt Address:&nbsp;&nbsp; <input type='text' required name='escrowAgent' hint='escrowAgent address' onChange={this.escrowAgentState} />&nbsp;&nbsp;\r\n                  <br></br><br></br><br></br><br></br>\r\n                  <input type='submit' name='Insert' />&nbsp;&nbsp;\r\n                </form>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}